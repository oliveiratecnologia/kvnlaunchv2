// lib/redis-config-upstash.ts
import { Redis, RedisOptions } from 'ioredis';
import { URL } from 'url';
import * as dotenv from 'dotenv';
import { resolve } from 'path';

// Carregar vari√°veis de ambiente do .env.local
dotenv.config({ path: resolve(process.cwd(), '.env.local') });

// Parse da REDIS_URL fornecida
function parseUpstashRedisUrl(redisUrl: string) {
  const url = new URL(redisUrl);
  
  return {
    host: url.hostname, // integral-katydid-16901.upstash.io
    port: parseInt(url.port) || 6379,
    username: url.username || 'default',
    password: url.password, // AUIFAAIjcDEwZmQwMmQ1NDBkMGU0ZjU0YmI3ZDFlNWQ3Yzg4YjMxZHAxMA
    protocol: url.protocol, // rediss:
  };
}

// Configura√ß√µes da conex√£o Upstash Redis
const REDIS_URL = process.env.REDIS_URL || process.env.KV_URL || '';
const parsedUrl = parseUpstashRedisUrl(REDIS_URL);

console.log(`üîó Configurando conex√£o Upstash Redis: ${parsedUrl.host}:${parsedUrl.port}`);

// Configura√ß√µes otimizadas para Upstash Redis + BullMQ
const upstashRedisConfig: RedisOptions = {
  host: parsedUrl.host,
  port: parsedUrl.port,
  username: parsedUrl.username,
  password: parsedUrl.password,
  
  // TLS obrigat√≥rio no Upstash (protocolo rediss://)
  tls: {
    rejectUnauthorized: true,
    servername: parsedUrl.host,
    // Configura√ß√µes espec√≠ficas para Upstash
    minVersion: 'TLSv1.2',
    maxVersion: 'TLSv1.3',
  },
  
  // Configura√ß√µes de timeout otimizadas para Upstash
  connectTimeout: 10000, // 10 segundos
  commandTimeout: 8000,  // 8 segundos (Upstash tem timeout mais restritivo)
  lazyConnect: false, // Conectar imediatamente
  
  // Pool de conex√µes otimizado para Upstash
  maxRetriesPerRequest: 3,
  retryDelayOnFailover: 200,
  maxLoadingTimeout: 8000,
  
  // Keep-alive para conex√£o externa
  keepAlive: 30000,
  family: 4,
  
  // Database sempre 0 no Upstash
  db: 0,
  
  // Configura√ß√µes de reconex√£o para Upstash
  reconnectOnError: (err) => {
    console.log('üîÑ Tentando reconectar ao Upstash Redis:', err.message);
    const targetErrors = ['READONLY', 'ECONNRESET', 'ETIMEDOUT', 'ENOTFOUND'];
    return targetErrors.some(target => err.message.includes(target));
  },
  
  // Retry strategy adaptado para Upstash (mais conservador)
  retryStrategy: (times) => {
    if (times > 3) {
      console.error(`‚ùå Falha na conex√£o Upstash ap√≥s ${times} tentativas`);
      return null; // Para de tentar
    }
    const delay = Math.min(times * 100, 3000);
    console.log(`üîÑ Retry Upstash tentativa ${times}, aguardando ${delay}ms`);
    return delay;
  },
  
  // Configura√ß√µes de performance
  enableReadyCheck: true,
  enableOfflineQueue: true, // Permitir enfileiramento offline para conex√£o inicial
  
  // Nome da conex√£o para debugging
  connectionName: 'upstash-bullmq-connection',
};

// Inst√¢ncia principal do Redis Upstash
export const upstashRedisConnection = new Redis(upstashRedisConfig);

// Pool de conex√µes adaptado para Upstash (menor que Redis Cloud)
export class UpstashRedisConnectionPool {
  private connections: Redis[] = [];
  private maxConnections = 6; // Conservador para Upstash
  private currentIndex = 0;

  constructor() {
    console.log(`üèä Criando pool de ${this.maxConnections} conex√µes Upstash Redis`);
    
    for (let i = 0; i < this.maxConnections; i++) {
      const connection = new Redis({
        ...upstashRedisConfig,
        connectionName: `upstash-pool-${i}`,
      });
      
      // Event listeners para cada conex√£o do pool
      connection.on('error', (err) => {
        console.error(`‚ùå Erro na conex√£o pool-${i}:`, err.message);
      });
      
      this.connections.push(connection);
    }
  }

  // Obter conex√£o do pool (round-robin)
  getConnection(): Redis {
    const connection = this.connections[this.currentIndex];
    this.currentIndex = (this.currentIndex + 1) % this.maxConnections;
    return connection;
  }

  // Fechar todas as conex√µes do pool
  async closeAll(): Promise<void> {
    console.log('üîå Fechando todas as conex√µes do pool Upstash');
    await Promise.all(
      this.connections.map((conn, index) => {
        console.log(`   Fechando conex√£o pool-${index}`);
        return conn.disconnect();
      })
    );
  }

  // Verificar sa√∫de do pool
  async healthCheck(): Promise<{ healthy: number; total: number }> {
    let healthy = 0;
    
    for (let i = 0; i < this.connections.length; i++) {
      try {
        await this.connections[i].ping();
        healthy++;
      } catch (error) {
        console.warn(`‚ö†Ô∏è Conex√£o pool-${i} n√£o est√° saud√°vel:`, error);
      }
    }
    
    return { healthy, total: this.connections.length };
  }
}

// Inst√¢ncia do pool para workers
export const upstashRedisPool = new UpstashRedisConnectionPool();

// Health check espec√≠fico para Upstash
export async function verificarConexaoUpstash(): Promise<{
  connected: boolean;
  latency: number;
  serverInfo?: string;
  error?: string;
}> {
  try {
    const start = Date.now();
    const pong = await upstashRedisConnection.ping();
    const latency = Date.now() - start;
    
    if (pong !== 'PONG') {
      throw new Error(`Resposta inesperada do ping: ${pong}`);
    }
    
    // Obter informa√ß√µes do servidor Upstash
    const serverInfo = await upstashRedisConnection.info('server');
    const serverVersion = serverInfo.split('\n').find(line => line.startsWith('redis_version:'));
    
    console.log(`‚úÖ Upstash Redis conectado - Lat√™ncia: ${latency}ms`);
    console.log(`üìä Servidor: ${serverVersion || 'Vers√£o n√£o identificada'}`);
    
    return {
      connected: true,
      latency,
      serverInfo: serverVersion || 'Unknown',
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    console.error('‚ùå Erro na conex√£o Upstash Redis:', errorMessage);
    
    return {
      connected: false,
      latency: -1,
      error: errorMessage,
    };
  }
}

// Monitoramento de eventos da conex√£o principal
upstashRedisConnection.on('connect', () => {
  console.log('üîó Conectado ao Upstash Redis');
});

upstashRedisConnection.on('ready', () => {
  console.log('‚úÖ Upstash Redis pronto para uso');
});

upstashRedisConnection.on('error', (err) => {
  console.error('‚ùå Erro Upstash Redis:', err.message);
});

upstashRedisConnection.on('close', () => {
  console.log('üîå Conex√£o Upstash Redis fechada');
});

upstashRedisConnection.on('reconnecting', () => {
  console.log('üîÑ Reconectando ao Upstash Redis...');
});

// Configura√ß√µes espec√≠ficas para BullMQ com Upstash
export const upstashBullMQConfig = {
  connection: upstashRedisConnection,
  
  // Configura√ß√µes otimizadas para Upstash + BullMQ
  settings: {
    stalledInterval: 60000,     // 1 minuto (reduzir polling para economizar requests)
    maxStalledCount: 1,         // Menos tentativas para evitar loops
    retryProcessDelay: 5000,    // 5 segundos entre tentativas
  },
  
  // Configura√ß√µes de job padr√£o otimizadas para Upstash
  defaultJobOptions: {
    removeOnComplete: 10,  // Manter apenas 10 jobs completos (economizar mem√≥ria)
    removeOnFail: 5,       // Manter apenas 5 jobs falhados
    attempts: 3,           // M√°ximo 3 tentativas
    backoff: {
      type: 'exponential' as const,
      delay: 2000,
    },
    // TTL para jobs (24 horas)
    ttl: 24 * 60 * 60 * 1000,
  },
};

// Fun√ß√£o para criar configura√ß√£o de worker otimizada
export function createUpstashWorkerConfig(concurrency: number = 3) {
  return {
    ...upstashBullMQConfig,
    concurrency, // Concorr√™ncia ajust√°vel
    
    // Configura√ß√µes espec√≠ficas do worker
    settings: {
      ...upstashBullMQConfig.settings,
      // Configura√ß√µes adicionais podem ser adicionadas aqui
    },
  };
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('üõë Recebido SIGTERM, fechando conex√µes Upstash Redis...');
  await upstashRedisPool.closeAll();
  await upstashRedisConnection.disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë Recebido SIGINT, fechando conex√µes Upstash Redis...');
  await upstashRedisPool.closeAll();
  await upstashRedisConnection.disconnect();
  process.exit(0);
});
