#!/bin/bash
# 04-start-services.sh
# Inicializar todos os servi√ßos da aplica√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configura√ß√µes
APP_DIR="/opt/ebook-generator"
DROPLET_IP="198.199.81.171"

log_info "üöÄ Iniciando todos os servi√ßos da aplica√ß√£o"

# 1. Navegar para diret√≥rio da aplica√ß√£o
cd $APP_DIR

# 2. Verificar se arquivos existem
if [ ! -f "api-gateway-droplet.js" ]; then
    log_error "Arquivo api-gateway-droplet.js n√£o encontrado!"
    log_info "Execute primeiro: bash 02-deploy-application.sh"
    exit 1
fi

if [ ! -f "workers-droplet.js" ]; then
    log_error "Arquivo workers-droplet.js n√£o encontrado!"
    log_info "Execute primeiro: bash 02-deploy-application.sh"
    exit 1
fi

if [ ! -f ".env.production" ]; then
    log_error "Arquivo .env.production n√£o encontrado!"
    log_info "Execute primeiro: bash 02-deploy-application.sh"
    exit 1
fi

# 3. Verificar se secrets est√£o configurados
log_info "üîç Verificando configura√ß√£o de secrets..."

if grep -q "YOUR_OPENAI_API_KEY_HERE" .env.production; then
    log_warning "‚ö†Ô∏è OPENAI_API_KEY n√£o configurado!"
    log_info "Edite: nano .env.production"
fi

if grep -q "YOUR_SERVICE_ROLE_KEY_HERE" .env.production; then
    log_warning "‚ö†Ô∏è SUPABASE_SERVICE_ROLE_KEY n√£o configurado!"
    log_info "Edite: nano .env.production"
fi

# 4. Testar conectividade Redis
log_info "üîó Testando conectividade Redis..."
if node -e "
const Redis = require('ioredis');
const redis = new Redis(process.env.REDIS_URL || 'rediss://default:AVNS_lYle9myZMLH1ZazBhlS@ebook-redis-valkey-do-user-24250021-0.m.db.ondigitalocean.com:25061');
redis.ping().then(() => {
  console.log('Redis OK');
  process.exit(0);
}).catch(err => {
  console.error('Redis Error:', err.message);
  process.exit(1);
});
"; then
    log_success "Redis conectado com sucesso"
else
    log_error "Falha na conex√£o com Redis!"
    log_info "Verifique se o cluster Redis est√° online"
    exit 1
fi

# 5. Parar servi√ßos existentes (se houver)
log_info "üõë Parando servi√ßos existentes..."
pm2 stop all 2>/dev/null || true
pm2 delete all 2>/dev/null || true

# 6. Iniciar API Gateway
log_info "üåê Iniciando API Gateway..."
pm2 start api-gateway-droplet.js \
    --name "ebook-api" \
    --instances 1 \
    --max-memory-restart 500M \
    --node-args="--max-old-space-size=512" \
    --log-file /var/log/ebook-generator/api.log \
    --error-file /var/log/ebook-generator/api-error.log \
    --out-file /var/log/ebook-generator/api-out.log

sleep 3

# 7. Iniciar Workers
log_info "‚öôÔ∏è Iniciando Workers BullMQ..."
pm2 start workers-droplet.js \
    --name "ebook-workers" \
    --instances 1 \
    --max-memory-restart 1G \
    --node-args="--max-old-space-size=1024" \
    --log-file /var/log/ebook-generator/workers.log \
    --error-file /var/log/ebook-generator/workers-error.log \
    --out-file /var/log/ebook-generator/workers-out.log

sleep 3

# 8. Salvar configura√ß√£o PM2
log_info "üíæ Salvando configura√ß√£o PM2..."
pm2 save

# 9. Verificar status dos servi√ßos
log_info "üîç Verificando status dos servi√ßos..."
pm2 status

# 10. Testar endpoints
log_info "üß™ Testando endpoints..."

# Testar API Gateway
log_info "Testando API Gateway..."
if curl -s -f "http://localhost:3000/health" > /dev/null; then
    log_success "‚úÖ API Gateway respondendo"
else
    log_error "‚ùå API Gateway n√£o est√° respondendo"
fi

# Testar Workers
log_info "Testando Workers..."
if curl -s -f "http://localhost:3001/health" > /dev/null; then
    log_success "‚úÖ Workers respondendo"
else
    log_error "‚ùå Workers n√£o est√£o respondendo"
fi

# 11. Testar endpoint p√∫blico
log_info "üåê Testando endpoint p√∫blico..."
if curl -s -f "http://$DROPLET_IP:3000/api/test" > /dev/null; then
    log_success "‚úÖ Endpoint p√∫blico acess√≠vel"
else
    log_warning "‚ö†Ô∏è Endpoint p√∫blico pode n√£o estar acess√≠vel"
    log_info "Verifique firewall: ufw status"
fi

# 12. Mostrar informa√ß√µes finais
log_success "üéâ Todos os servi√ßos iniciados com sucesso!"
echo ""
echo "üìä STATUS DOS SERVI√áOS:"
pm2 status

echo ""
echo "üåê ENDPOINTS DISPON√çVEIS:"
echo "  ‚Ä¢ API Test: http://$DROPLET_IP:3000/api/test"
echo "  ‚Ä¢ Health Check API: http://$DROPLET_IP:3000/health"
echo "  ‚Ä¢ Health Check Workers: http://$DROPLET_IP:3001/health"
echo ""
echo "üîß COMANDOS √öTEIS:"
echo "  ‚Ä¢ Status: pm2 status"
echo "  ‚Ä¢ Logs API: pm2 logs ebook-api"
echo "  ‚Ä¢ Logs Workers: pm2 logs ebook-workers"
echo "  ‚Ä¢ Restart API: pm2 restart ebook-api"
echo "  ‚Ä¢ Restart Workers: pm2 restart ebook-workers"
echo "  ‚Ä¢ Monitoramento: pm2 monit"
echo ""
echo "üìã LOGS:"
echo "  ‚Ä¢ API: /var/log/ebook-generator/api.log"
echo "  ‚Ä¢ Workers: /var/log/ebook-generator/workers.log"
echo "  ‚Ä¢ Nginx: /var/log/nginx/ebook-generator.access.log"
echo ""

# 13. Testar cria√ß√£o de job (se secrets estiverem configurados)
if ! grep -q "YOUR_OPENAI_API_KEY_HERE" .env.production && ! grep -q "YOUR_SERVICE_ROLE_KEY_HERE" .env.production; then
    log_info "üß™ Testando cria√ß√£o de job de ebook..."
    
    RESPONSE=$(curl -s -X POST "http://localhost:3000/api/ebooks/generate" \
        -H "Content-Type: application/json" \
        -H "X-API-Key: ebook-api-secret-2025-digitalocean" \
        -d '{
            "userId": "test-user-droplet",
            "ebookData": {
                "titulo": "Teste DigitalOcean Droplet",
                "categoria": "Tecnologia",
                "numeroCapitulos": 3
            }
        }' || echo "ERROR")
    
    if echo "$RESPONSE" | grep -q "success"; then
        log_success "‚úÖ Job de teste criado com sucesso!"
        echo "Response: $RESPONSE"
    else
        log_warning "‚ö†Ô∏è Falha ao criar job de teste"
        echo "Response: $RESPONSE"
    fi
else
    log_warning "‚ö†Ô∏è Secrets n√£o configurados - pule o teste de job"
    log_info "Configure os secrets em .env.production e reinicie os servi√ßos"
fi

echo ""
log_success "üöÄ Sistema de gera√ß√£o de ebooks est√° rodando no Droplet!"
log_info "üí° Para configurar SSL/dom√≠nio, execute: bash 03-setup-ssl.sh [seu-dominio.com]"
